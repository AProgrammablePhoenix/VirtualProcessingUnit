; expected output:
; 4096
; Hello World!
; P
; 3.140000
; Hello_World!

; won't be processed since 16 KB is less than 1 MB (only shown as an example of usage)
; in a case without limitations, will resize memory to a size of 16 KB (which is impossible since one stack requires 32 KB)
[MRES] 16384

; get heap offset
sdzs RDX

setRAX ${{N4096}}
push RAX
setAX ${{N2}}
addAX RDX
movsm AX
movgm AX

; RAX should not contain this value after memory get
setRAX ${{N15000}}

pop RAX

toString RAX
int ${{N6}} ; expected: 4096

setSR ${{S"Hello World!"}}
setAX ${{N10}}
addAX RDX
movsmSR AX

; in case the program has unexpected behaviour
setSR ${{S"Test failed!"}}

movgmSR AX
int ${{N6}}

setCR ${{C'P'}}
setAX ${{N0}}
addAX RDX
movsmCR AX

; in cas the program has unexpected behaviour
setCR ${{C'F'}}

movgmCR AX
int ${{N10}}
int ${{N6}}

setDR ${{D3.14}}
setAX ${{N31}}
addAX RDX
movsmDR AX

; in cas the program has unexpected behaviour
setDR ${{D-1}}

movgmDR AX
int ${{N12}}
int ${{N6}}


; test of character replacement in stored string (addr = 10 => previous stored SR)
setCR ${{C'_'}}
setAX ${{N23}} ; location of character ' ' in "Hello World!" in heap memory
; calculate real address by adding heap offset
addAX RDX
movsmCR AX

; reload new string in SR
setAX ${{N10}}
addAX RDX
movgmSR AX

; should print "Hello_World!" now
int ${{N6}}