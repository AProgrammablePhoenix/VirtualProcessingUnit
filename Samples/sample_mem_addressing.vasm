; expected output:
; 4096
; Hello World!
; P
; 3.140000
; Hello_World!

; won't be processed since 16 KB is less than 1 MB (only shown as an example of usage)
; in a case without limitations, will resize memory to a size of 16 KB (which is impossible since one stack requires 32 KB)
[MRES] 16384

; get heap offset
sdzs RDX

; set display call 1 (println)
setRAX ${{N1}}

setRCX ${{N4096}}
push RCX
setCX ${{N2}}
addCX RDX
movsm CX
movgm CX

; RCX should not contain this value after memory get
setRCX ${{N15000}}

pop RCX

toString RCX
int ${{N5}} ; expected: 4096

setSR ${{S"Hello World!"}}
setCX ${{N10}}
addCX RDX
movsmSR CX

; in case the program has unexpected behaviour
setSR ${{S"Test failed!"}}

movgmSR CX
int ${{N5}}

setCR ${{C'P'}}
setCX ${{N0}}
addCX RDX
movsmCR CX

; in cas the program has unexpected behaviour
setCR ${{C'F'}}

movgmCR CX
setRAX ${{N0}}
int ${{N8}}
setRAX ${{N1}}
int ${{N5}}

setRFPR0 ${{D3.14}}
setRCX ${{N31}}
addRCX RDX
movsmFP RFPR0

; in case the program has unexpected behaviour
setRFPR0 ${{D-1}}

movgmFP RFPR0
pushFP RFPR0
setRAX ${{N2}}
int ${{N8}}
setRAX ${{N1}}
int ${{N5}}


; test of character replacement in stored string (addr = 10 => previous stored SR)
setCR ${{C'_'}}
setCX ${{N23}} ; location of character ' ' in "Hello World!" in heap memory
; calculate real address by adding heap offset
addCX RDX
movsmCR CX

; reload new string in SR
setCX ${{N10}}
addCX RDX
movgmSR CX

; should print "Hello_World!" now
int ${{N5}}